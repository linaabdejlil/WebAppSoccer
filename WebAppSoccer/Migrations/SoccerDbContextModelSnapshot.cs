// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAppSoccer.Data;

#nullable disable

namespace WebAppSoccer.Migrations
{
    [DbContext(typeof(SoccerDbContext))]
    partial class SoccerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebAppSoccer.Models.Club", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LibClub")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("WebAppSoccer.Models.Joueur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClubId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateN")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Num")
                        .HasColumnType("int");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("Joueurs");
                });

            modelBuilder.Entity("WebAppSoccer.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ButL")
                        .HasColumnType("int");

                    b.Property<int>("ButV")
                        .HasColumnType("int");

                    b.Property<int>("ClubIdL")
                        .HasColumnType("int");

                    b.Property<int>("ClubIdV")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateM")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClubIdL");

                    b.HasIndex("ClubIdV");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("WebAppSoccer.Models.Participer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("JoueurId")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JoueurId");

                    b.HasIndex("MatchId");

                    b.ToTable("Participers");
                });

            modelBuilder.Entity("WebAppSoccer.Models.Joueur", b =>
                {
                    b.HasOne("WebAppSoccer.Models.Club", "Club")
                        .WithMany("Joueurs")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");
                });

            modelBuilder.Entity("WebAppSoccer.Models.Match", b =>
                {
                    b.HasOne("WebAppSoccer.Models.Club", "ClubL")
                        .WithMany("MatchsL")
                        .HasForeignKey("ClubIdL")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAppSoccer.Models.Club", "ClubV")
                        .WithMany("MatchsV")
                        .HasForeignKey("ClubIdV")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClubL");

                    b.Navigation("ClubV");
                });

            modelBuilder.Entity("WebAppSoccer.Models.Participer", b =>
                {
                    b.HasOne("WebAppSoccer.Models.Joueur", "Joueur")
                        .WithMany("Participers")
                        .HasForeignKey("JoueurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAppSoccer.Models.Match", "Match")
                        .WithMany("Participers")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Joueur");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("WebAppSoccer.Models.Club", b =>
                {
                    b.Navigation("Joueurs");

                    b.Navigation("MatchsL");

                    b.Navigation("MatchsV");
                });

            modelBuilder.Entity("WebAppSoccer.Models.Joueur", b =>
                {
                    b.Navigation("Participers");
                });

            modelBuilder.Entity("WebAppSoccer.Models.Match", b =>
                {
                    b.Navigation("Participers");
                });
#pragma warning restore 612, 618
        }
    }
}
